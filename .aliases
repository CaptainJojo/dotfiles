# Aliases

export OS
OS="$(uname)"
PHPD=${PHPD:='php:5.6'}

# Misc
alias vi='vim'
alias ri='ri -f ansi'
which colordiff &>/dev/null && alias diff='colordiff'

# Some aliases to avoid making mistakes
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# shortcuts
alias c='clear'
alias q='exit'
alias h='history'

# Time
alias now='date +"%T"'
alias nowtime='now'
alias nowdate='date +"%d-%m-%Y"'

# Can I haz `timeout` ?
hash gtimeout &>/dev/null && alias timeout='gtimeout'

# Override ls alias from common-aliases plugin
alias ls='ls -G'
alias ll='ls -lah'

# Noglob for git
alias git='noglob git'

# Vim fzf
alias fvim='vim $(fzf)'

# Override prezto fasd module, include fzf fuzzy finder.
alias j='fasd_cd'
which compdef &>/dev/null && compdef ssht=ssh && compdef sshrc=ssh

# Reload the shell (i.e. invoke as a login shell)
alias reload='exec $SHELL -l'

alias update-prezto='cd $HOME/.zprezto && git pull && git submodule update --init --recursive && cd -'

# kubectl my little cloud
if hash kubectl &>/dev/null; then
  alias kci='kubectl cluster-info'
  alias kc='kubectl create'
  alias kr='kubectl delete'
  alias kd='kubectl describe'
  alias ke='kubectl execute'
  alias kg='kubectl get'
  alias kl='kubectl logs'
  alias kcs='kubectl --namespace=kube-system create'
  alias krs='kubectl --namespace=kube-system delete'
  alias kds='kubectl --namespace=kube-system describe'
  alias kes='kubectl --namespace=kube-system execute'
  alias kgs='kubectl --namespace=kube-system get'
  alias kls='kubectl --namespace=kube-system logs'

  function kubectl-destroy-cluster() {
  kr no --all; krs no --all; kr rc --all; krs rc --all; kr po --all; krs po --all;
  kr svc --all; krs svc --all; kr ns --all; krs ns --all; kr ep --all; krs ep --all;
}
fi

function fasd_cd() {
  local dir
  local fasd_ret
  fasd_ret="$(fasd -Rdl "$@")"
  if [[ -d "$fasd_ret" ]]; then
    cd "$fasd_ret" || exit
  else
    dir="$(print "$fasd_ret" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
  fi
}

# Fast rsync remove
function rmf() {
   printf "Will remove direcory %s ! \nCTRL-C to abort...%s"
   sleep 3
   mkdir -p /tmp/empty_dir/
   [[ ! -z "$1" ]] && [[ $1 != '/' ]] && rsync -a --delete /tmp/empty_dir/ "$1"/
   [[ -d "$1" ]] && [[ "$1" != '.' ]] && rmdir "$1";
   rmdir /tmp/empty_dir
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
  if [ "x$pid" != "x" ]
  then
    kill -"${1:-9}" "$pid"
  fi
}

# Cuz IMADUMMY
which mysql &>/dev/null && alias mysql='mysql --i-am-a-dummy'

# update tab name
function tabname() {
  echo -en "\033];$1\007"
  if [[ "$(ps -p "$(ps -p $$ -o ppid=)" -o comm=)" = 'tmux' ]]; then
    tmux rename-window "$(echo "$*" | cut -d . -f 1)"
  fi
}

# Automatically Starting tmux on SSH
function ssht() {
  for SSH_HOST; do true; done
  tabname "$SSH_HOST"
  ssh "$@" -t 'tmux ls && exec tmux a || exec tmux new || exec $SHELL -l'
}

# assh aliases
if hash assh &>/dev/null; then
  function assh-build() {
    mv "$HOME/.ssh/config" "$HOME/.ssh/config.bk"
    assh build > "$HOME/.ssh/config"
    sed -i 's,ProxyCommand assh proxy --port=%p %h,,g' "$HOME/.ssh/config"
  }
fi

# php / composer aliases
function phpd() {
  local mount
  if  [[ $1 == /* ]]; then mount=$(dirname "$1"); else mount=$PWD; fi
  docker run -ti --rm --name php56-"$USER"-"$(gdate +%s%N)" -v "$mount":"$mount" -w "$mount" loliee/"$PHPD" php "$@"
  unset mount
}

function composerd() {
  local args="$*"
  local name="$PHPD-composer-$args"
  if hash gdate &>/dev/null; then
    name="$name"-"$(gdate +%s%N)"
  else
    name="$name"-"$(gdate +%sN)"
  fi
  # shellcheck disable=SC2001
  name="$(echo "$name" | sed "s/[^a-zA-Z0-9_.-]/_/")"
  if  [[ $1 == /* ]]; then mount=$(dirname "$1"); else mount=$PWD; fi
  docker run -ti --rm --name "$name" -v "$mount":"$mount" -w "$mount" loliee/"$PHPD" php -n \
    -dtimezone=Europe/Paris -dextension=bz2.so -dextension=ftp.so -dextension=intl.so \
    -dextension=mysql.so -dextension=redis.so -dextension=soap.so -dextension=tidy.so \
    -dextension=pcntl.so -dextension=pgsql.so -dextension=xsl.so -dextension=zip.so \
    -dmemory_limit=-1 /usr/local/bin/composer.phar "$@"
  unset mount name
}

# Composer
alias composer-token='[[ ! -z $GITHUB_TOKEN ]] && composer config github-oauth.github.com $GITHUB_TOKEN'

function composer-link() {
  umount -f "$2" &> /dev/null && rm -rf "$2"
  if bindfs assh &>/dev/null; then
    mkdir -p "$2" && bindfs --create-with-perms=u+rw "$1" "$2"
  else
    mkdir -p "$2" && mount --bind --create-with-perms=u+rw "$1" "$2"
  fi
  echo "$1 linked in $2"
}

function composer-unlink() {
  umount -f "$1" &> /dev/null && rm -rf "$1"
}

# Ultra important tea aliases.
function tea() {
  local STEEP_TIME=${STEEP_TIME:=180}

  [[ "$STEEP_TIME" != [0-9]* ]] && exit 1
  sleep "$STEEP_TIME"

  terminal-notifier \
    -title 'üçµ Tea Club' \
    -message 'Your tea is ready!' \
    -appIcon 'https://www.emojibase.com/resources/img/emojis/apple/x2615.png.pagespeed.ic.fUhSj-YPGK.png'
}

# Aliases for OSx
# See https://github.com/mathiasbynens/dotfiles/blob/master/.aliases
if [[ $OS == 'Darwin' ]]; then
  # Stopwatch
  alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

  # Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
  alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update; update-prezto'

  # IP addresses
  alias localip="ipconfig getifaddr en0"

  # Flush Directory Service cache
  alias flush='dscacheutil -flushcache && killall -HUP mDNSResponder'

  # Clean up LaunchServices to remove duplicates in the ‚ÄúOpen With‚Äù menu
  alias lscleanup='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder'

  # Empty the Trash on all mounted volumes and the main HDD
  # Also, clear Apple‚Äôs System Logs to improve shell startup speed
  alias emptytrash='sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl'

  # Show/hide hidden files in Finder
  alias show='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'
  alias hide='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'

  # Hide/show all desktop icons (useful when presenting)
  alias hidedesktop='defaults write com.apple.finder CreateDesktop -bool false && killall Finder'
  alias showdesktop='defaults write com.apple.finder CreateDesktop -bool true && killall Finder'

  # Ring the terminal bell, and put a badge on Terminal.app‚Äôs Dock icon
  # (useful when executing time-consuming commands)
  alias badge='tput bel'

  # Kill all the tabs in Chrome to free up memory
  # [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description
  alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"

  # Defaults
  alias 'defaults.list=rc="\n" && defaults domains | sed s/,/"$rc"/g'

  # Lock the screen (when going AFK)
  alias afk='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

  # Update interfaces config, usefull to set Proxies, DNS etc ...
  function update_interfaces() {
    networksetup -listallnetworkservices | while read -r interface; do
      if [[ "$interface" == "*Ethernet" ]] \
      || [[ "$interface" == "Thunderbolt Ethernet" ]] \
      || [[ "$interface" == "Wi-Fi" ]]; then
        eval "$1" && print "${1//\$interface/$interface}"
      fi
    done
  }

  # Docker create docker vm / ensure is started.
  function docker-vm() {
    docker-machine create -d virtualbox --virtualbox-hostonly-cidr "10.10.10.1/24" dev || docker-machine start dev
    eval "$(docker-machine env dev)"
  }

  # Dnsmasq
  alias dnsmasq-start='sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist'
  alias dnsmasq-stop='sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist'
  alias dnsmasq-restart='dnsmasq-stop;dnsmasq-start'

  # shellcheck disable=SC2016
  function dnsmasq-enable() {
    update_interfaces 'sudo networksetup -setdnsservers "$interface" "127.0.0.1"'
  }

  # shellcheck disable=SC2016
  function dnsmasq-disable() {
    update_interfaces 'sudo networksetup -setdnsservers "$interface" "Empty"'
  }

  # Polipo
  alias polipo-cache-size='du -hs "$HOME/.polipo-cache/"'

  # shellcheck disable=SC2016
  function polipo-enable(){
    update_interfaces 'sudo networksetup -setwebproxy "$interface" localhost 8123'
    update_interfaces 'sudo networksetup -setsecurewebproxy "$interface" localhost 8123'
    update_interfaces 'sudo networksetup -setproxybypassdomains "$interface" "*.local 169.254/16 localhost 127.0.0.1"'
  }

  # shellcheck disable=SC2016
  function polipo-disable(){
    update_interfaces 'sudo networksetup -setwebproxystate "$interface" Off'
    update_interfaces 'sudo networksetup -setsecurewebproxystate "$interface" Off'
  }

  function polipo-cache-clear(){
    launchctl unload "$HOME/Library/LaunchAgents/homebrew.mxcl.polipo.plist"; polipo -x
    mkdir -p /tmp/empty_dir/ && rsync -a --delete /tmp/empty_dir/ "$HOME/.polipo-cache/"
    rmdir /tmp/empty_dir/ launchctl load "$HOME/Library/LaunchAgents/homebrew.mxcl.polipo.plist"
  }
fi

# Aliases for Linux, Ops.
if [[ $OS == 'Linux' ]]; then
  # safety, override
  alias rm='rm -i --preserve-root'
  alias chown='chown --preserve-root'
  alias chmod='chmod --preserve-root'
  alias chgrp='chgrp --preserve-root'

  # can i haz color
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'
  alias ll='ls -lah'
  alias la='ls -A'
  alias l='ls -lAh'

  # Find large files and directories
  alias fat='du -a | sort -n -r | head -n 20'

  # Show open ports
  alias ports='netstat -tulanp'

  # Memory
  alias meminfo='free -m -l -t'

  # Get top process eating memory
  alias psmem='ps auxf | sort -nr -k 4'
  alias psmem10='ps auxf | sort -nr -k 4 | head -10'

  # Get top process eating cpu
  alias pscpu='ps auxf | sort -nr -k 3'
  alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

  # Count all opened files by all process
  alias count_opened_files='lsof | wc -l'

  # Get maximum open files count allowed
  alias max_open_files='cat /proc/sys/fs/file-max'

  # Flush swap
  alias swapoffon='nohup bash -c "swapoff -a; swapon -a" &>/dev/null'

  # Yolo
  alias dropcache='sync && echo 3 > /proc/sys/vm/drop_caches'

  # iptables
  alias ipt='iptables'
  alias iptlist='iptables -L -n -v --line-numbers'
  alias iptlistin='iptables -L INPUT -n -v --line-numbers'
  alias iptlistout='iptables -L OUTPUT -n -v --line-numbers'
  alias iptlistfw='iptables -L FORWARD -n -v --line-numbers'
  alias firewall='iptlist'
  alias ban='iptables -I INPUT -j DROP -s'
  alias unban='iptables -D INPUT -j DROP -s'
  alias banin='iptables -I INPUT -j DROP -s'
  alias unbanin='iptables -D INPUT -j DROP -s'
  alias banout='iptables -I OUTPUT -j DROP -s'
  alias unbanout='iptables -D OUTPUT -j DROP -s'
  alias listbans='iptables -L -v -n | grep -e Chain -e DROP'

  # Log
  if which ccze &>/dev/null; then
    alias syslog='sudo tail -f /var/log/syslog | ccze'
  else
    alias syslog='sudo tail -f /var/log/syslog'
  fi

  alias tf='sudo tail -f'

  # services specific
  if which nginx &>/dev/null; then
    alias nginxtest='nginx -t'
    alias nginxreload='nginxtest && /etc/init.d/nginx reload'
  fi

  if which apache2ctl &>/dev/null; then
    alias apachetest='apache2ctl -t'
    alias apachereload='apachetest && /etc/init.d/apache2 reload'
  fi

  if which php5-fpm &>/dev/null; then
    alias php5fpmtest='php5-fpm -t'
    alias php5fpmreload='php5-fpmtest && /etc/init.d/php5-fpm reload'
    alias php5fpmstatus='curl 127.0.0.1/status'
  fi
fi

# shellcheck source=/dev/null
if [[ -f ~/.aliases.local ]]; then
   . ~/.aliases.local
fi
